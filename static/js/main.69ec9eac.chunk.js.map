{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","className","href","TodoInfo","todoInfoClassNames","classNames","user","usersFromServer","find","item","TodoList","todos","map","App","useState","setUser","setTitle","isTitle","setIsTitle","isUser","setIsUser","todosFromServer","setTodos","createTodoInfoId","ids","Math","max","action","method","onSubmit","event","preventDefault","todo","Number","prev","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69ec9eac.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC } from 'react';\n\ninterface Props {\n  name: string;\n  email: string;\n}\n\nexport const UserInfo: FC<Props> = ({ name, email }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${email}`}\n  >\n    {name}\n  </a>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport usersFromServer from '../../api/users';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\nexport const TodoInfo: FC<Todo> = ({\n  id,\n  title,\n  userId,\n  completed,\n}) => {\n  const todoInfoClassNames = classNames('TodoInfo', {\n    'TodoInfo--completed': completed,\n  });\n\n  const user = usersFromServer.find(item => item.id === userId);\n\n  return (\n    <article\n      data-id={id}\n      className={todoInfoClassNames}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo\n          name={user.name}\n          email={user.email}\n        />\n      )}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(({\n        id,\n        title,\n        userId,\n        completed,\n      }) => (\n        <TodoInfo\n          key={id}\n          id={id}\n          title={title}\n          userId={userId}\n          completed={completed}\n        />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Input, Select, Submit } from './types/events';\n\nimport './App.scss';\n\nexport const App = () => {\n  const [user, setUser] = useState('');\n  const [title, setTitle] = useState('');\n  const [isTitle, setIsTitle] = useState(false);\n  const [isUser, setIsUser] = useState(false);\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const createTodoInfoId = () => {\n    const ids = todos.map(({ id }) => id);\n\n    return Math.max(...ids) + 1;\n  };\n\n  const handleInputChange = (event: Input) => {\n    const { value } = event.target;\n\n    setTitle(value);\n\n    if (!title) {\n      setIsTitle(false);\n    }\n  };\n\n  const handleSelectChange = (event: Select) => {\n    const { value } = event.target;\n\n    setUser(value);\n\n    if (!user) {\n      setIsUser(false);\n    }\n  };\n\n  const handleSubmit = (event: Submit) => {\n    event.preventDefault();\n\n    if (!user) {\n      setIsUser(true);\n    }\n\n    if (!title) {\n      setIsTitle(true);\n    }\n\n    if (title && user) {\n      const todo = {\n        id: createTodoInfoId(),\n        title,\n        userId: Number(user),\n        completed: true,\n      };\n\n      setTodos(prev => [\n        ...prev,\n        todo,\n      ]);\n\n      setTitle('');\n      setUser('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              name=\"title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleInputChange}\n            />\n          </label>\n          {isTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              name=\"userId\"\n              value={user}\n              onChange={handleSelectChange}\n            >\n              <option value=\"\" disabled>\n                Choose a user\n              </option>\n              {usersFromServer.map(({ id, name }) => (\n                <option\n                  key={id}\n                  value={id}\n                >\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}